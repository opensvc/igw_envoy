# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: envoy/api/v2/rds.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from envoy.api.v2.core import base_pb2 as envoy_dot_api_dot_v2_dot_core_dot_base__pb2
from envoy.api.v2 import discovery_pb2 as envoy_dot_api_dot_v2_dot_discovery__pb2
from envoy.api.v2.route import route_pb2 as envoy_dot_api_dot_v2_dot_route_dot_route__pb2
from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.protobuf import wrappers_pb2 as google_dot_protobuf_dot_wrappers__pb2
from gogoproto import gogo_pb2 as gogoproto_dot_gogo__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='envoy/api/v2/rds.proto',
  package='envoy.api.v2',
  syntax='proto3',
  serialized_pb=_b('\n\x16\x65nvoy/api/v2/rds.proto\x12\x0c\x65nvoy.api.v2\x1a\x1c\x65nvoy/api/v2/core/base.proto\x1a\x1c\x65nvoy/api/v2/discovery.proto\x1a\x1e\x65nvoy/api/v2/route/route.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobuf/wrappers.proto\x1a\x14gogoproto/gogo.proto\"\xe7\x02\n\x12RouteConfiguration\x12\x0c\n\x04name\x18\x01 \x01(\t\x12<\n\rvirtual_hosts\x18\x02 \x03(\x0b\x32\x1f.envoy.api.v2.route.VirtualHostB\x04\xc8\xde\x1f\x00\x12\x1d\n\x15internal_only_headers\x18\x03 \x03(\t\x12\x45\n\x17response_headers_to_add\x18\x04 \x03(\x0b\x32$.envoy.api.v2.core.HeaderValueOption\x12\"\n\x1aresponse_headers_to_remove\x18\x05 \x03(\t\x12\x44\n\x16request_headers_to_add\x18\x06 \x03(\x0b\x32$.envoy.api.v2.core.HeaderValueOption\x12\x35\n\x11validate_clusters\x18\x07 \x01(\x0b\x32\x1a.google.protobuf.BoolValue2\xd1\x02\n\x15RouteDiscoveryService\x12U\n\x0cStreamRoutes\x12\x1e.envoy.api.v2.DiscoveryRequest\x1a\x1f.envoy.api.v2.DiscoveryResponse\"\x00(\x01\x30\x01\x12p\n\x11IncrementalRoutes\x12).envoy.api.v2.IncrementalDiscoveryRequest\x1a*.envoy.api.v2.IncrementalDiscoveryResponse\"\x00(\x01\x30\x01\x12o\n\x0b\x46\x65tchRoutes\x12\x1e.envoy.api.v2.DiscoveryRequest\x1a\x1f.envoy.api.v2.DiscoveryResponse\"\x1f\x82\xd3\xe4\x93\x02\x19\"\x14/v2/discovery:routes:\x01*B\x07\x88\x01\x01\xa8\xe2\x1e\x01\x62\x06proto3')
  ,
  dependencies=[envoy_dot_api_dot_v2_dot_core_dot_base__pb2.DESCRIPTOR,envoy_dot_api_dot_v2_dot_discovery__pb2.DESCRIPTOR,envoy_dot_api_dot_v2_dot_route_dot_route__pb2.DESCRIPTOR,google_dot_api_dot_annotations__pb2.DESCRIPTOR,google_dot_protobuf_dot_wrappers__pb2.DESCRIPTOR,gogoproto_dot_gogo__pb2.DESCRIPTOR,])




_ROUTECONFIGURATION = _descriptor.Descriptor(
  name='RouteConfiguration',
  full_name='envoy.api.v2.RouteConfiguration',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='envoy.api.v2.RouteConfiguration.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='virtual_hosts', full_name='envoy.api.v2.RouteConfiguration.virtual_hosts', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\310\336\037\000'))),
    _descriptor.FieldDescriptor(
      name='internal_only_headers', full_name='envoy.api.v2.RouteConfiguration.internal_only_headers', index=2,
      number=3, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response_headers_to_add', full_name='envoy.api.v2.RouteConfiguration.response_headers_to_add', index=3,
      number=4, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='response_headers_to_remove', full_name='envoy.api.v2.RouteConfiguration.response_headers_to_remove', index=4,
      number=5, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='request_headers_to_add', full_name='envoy.api.v2.RouteConfiguration.request_headers_to_add', index=5,
      number=6, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='validate_clusters', full_name='envoy.api.v2.RouteConfiguration.validate_clusters', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=217,
  serialized_end=576,
)

_ROUTECONFIGURATION.fields_by_name['virtual_hosts'].message_type = envoy_dot_api_dot_v2_dot_route_dot_route__pb2._VIRTUALHOST
_ROUTECONFIGURATION.fields_by_name['response_headers_to_add'].message_type = envoy_dot_api_dot_v2_dot_core_dot_base__pb2._HEADERVALUEOPTION
_ROUTECONFIGURATION.fields_by_name['request_headers_to_add'].message_type = envoy_dot_api_dot_v2_dot_core_dot_base__pb2._HEADERVALUEOPTION
_ROUTECONFIGURATION.fields_by_name['validate_clusters'].message_type = google_dot_protobuf_dot_wrappers__pb2._BOOLVALUE
DESCRIPTOR.message_types_by_name['RouteConfiguration'] = _ROUTECONFIGURATION
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

RouteConfiguration = _reflection.GeneratedProtocolMessageType('RouteConfiguration', (_message.Message,), dict(
  DESCRIPTOR = _ROUTECONFIGURATION,
  __module__ = 'envoy.api.v2.rds_pb2'
  # @@protoc_insertion_point(class_scope:envoy.api.v2.RouteConfiguration)
  ))
_sym_db.RegisterMessage(RouteConfiguration)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\210\001\001\250\342\036\001'))
_ROUTECONFIGURATION.fields_by_name['virtual_hosts'].has_options = True
_ROUTECONFIGURATION.fields_by_name['virtual_hosts']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\310\336\037\000'))

_ROUTEDISCOVERYSERVICE = _descriptor.ServiceDescriptor(
  name='RouteDiscoveryService',
  full_name='envoy.api.v2.RouteDiscoveryService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=579,
  serialized_end=916,
  methods=[
  _descriptor.MethodDescriptor(
    name='StreamRoutes',
    full_name='envoy.api.v2.RouteDiscoveryService.StreamRoutes',
    index=0,
    containing_service=None,
    input_type=envoy_dot_api_dot_v2_dot_discovery__pb2._DISCOVERYREQUEST,
    output_type=envoy_dot_api_dot_v2_dot_discovery__pb2._DISCOVERYRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='IncrementalRoutes',
    full_name='envoy.api.v2.RouteDiscoveryService.IncrementalRoutes',
    index=1,
    containing_service=None,
    input_type=envoy_dot_api_dot_v2_dot_discovery__pb2._INCREMENTALDISCOVERYREQUEST,
    output_type=envoy_dot_api_dot_v2_dot_discovery__pb2._INCREMENTALDISCOVERYRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='FetchRoutes',
    full_name='envoy.api.v2.RouteDiscoveryService.FetchRoutes',
    index=2,
    containing_service=None,
    input_type=envoy_dot_api_dot_v2_dot_discovery__pb2._DISCOVERYREQUEST,
    output_type=envoy_dot_api_dot_v2_dot_discovery__pb2._DISCOVERYRESPONSE,
    options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\202\323\344\223\002\031\"\024/v2/discovery:routes:\001*')),
  ),
])
_sym_db.RegisterServiceDescriptor(_ROUTEDISCOVERYSERVICE)

DESCRIPTOR.services_by_name['RouteDiscoveryService'] = _ROUTEDISCOVERYSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class RouteDiscoveryServiceStub(object):
    """[#protodoc-title: HTTP route configuration]
    * Routing :ref:`architecture overview <arch_overview_http_routing>`
    * HTTP :ref:`router filter <config_http_filters_router>`

    The resource_names field in DiscoveryRequest specifies a route configuration.
    This allows an Envoy configuration with multiple HTTP listeners (and
    associated HTTP connection manager filters) to use different route
    configurations. Each listener will bind its HTTP connection manager filter to
    a route table via this identifier.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.StreamRoutes = channel.stream_stream(
          '/envoy.api.v2.RouteDiscoveryService/StreamRoutes',
          request_serializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.SerializeToString,
          response_deserializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.FromString,
          )
      self.IncrementalRoutes = channel.stream_stream(
          '/envoy.api.v2.RouteDiscoveryService/IncrementalRoutes',
          request_serializer=envoy_dot_api_dot_v2_dot_discovery__pb2.IncrementalDiscoveryRequest.SerializeToString,
          response_deserializer=envoy_dot_api_dot_v2_dot_discovery__pb2.IncrementalDiscoveryResponse.FromString,
          )
      self.FetchRoutes = channel.unary_unary(
          '/envoy.api.v2.RouteDiscoveryService/FetchRoutes',
          request_serializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.SerializeToString,
          response_deserializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.FromString,
          )


  class RouteDiscoveryServiceServicer(object):
    """[#protodoc-title: HTTP route configuration]
    * Routing :ref:`architecture overview <arch_overview_http_routing>`
    * HTTP :ref:`router filter <config_http_filters_router>`

    The resource_names field in DiscoveryRequest specifies a route configuration.
    This allows an Envoy configuration with multiple HTTP listeners (and
    associated HTTP connection manager filters) to use different route
    configurations. Each listener will bind its HTTP connection manager filter to
    a route table via this identifier.
    """

    def StreamRoutes(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def IncrementalRoutes(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchRoutes(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_RouteDiscoveryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'StreamRoutes': grpc.stream_stream_rpc_method_handler(
            servicer.StreamRoutes,
            request_deserializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.FromString,
            response_serializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.SerializeToString,
        ),
        'IncrementalRoutes': grpc.stream_stream_rpc_method_handler(
            servicer.IncrementalRoutes,
            request_deserializer=envoy_dot_api_dot_v2_dot_discovery__pb2.IncrementalDiscoveryRequest.FromString,
            response_serializer=envoy_dot_api_dot_v2_dot_discovery__pb2.IncrementalDiscoveryResponse.SerializeToString,
        ),
        'FetchRoutes': grpc.unary_unary_rpc_method_handler(
            servicer.FetchRoutes,
            request_deserializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.FromString,
            response_serializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'envoy.api.v2.RouteDiscoveryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaRouteDiscoveryServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#protodoc-title: HTTP route configuration]
    * Routing :ref:`architecture overview <arch_overview_http_routing>`
    * HTTP :ref:`router filter <config_http_filters_router>`

    The resource_names field in DiscoveryRequest specifies a route configuration.
    This allows an Envoy configuration with multiple HTTP listeners (and
    associated HTTP connection manager filters) to use different route
    configurations. Each listener will bind its HTTP connection manager filter to
    a route table via this identifier.
    """
    def StreamRoutes(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def IncrementalRoutes(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchRoutes(self, request, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaRouteDiscoveryServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#protodoc-title: HTTP route configuration]
    * Routing :ref:`architecture overview <arch_overview_http_routing>`
    * HTTP :ref:`router filter <config_http_filters_router>`

    The resource_names field in DiscoveryRequest specifies a route configuration.
    This allows an Envoy configuration with multiple HTTP listeners (and
    associated HTTP connection manager filters) to use different route
    configurations. Each listener will bind its HTTP connection manager filter to
    a route table via this identifier.
    """
    def StreamRoutes(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def IncrementalRoutes(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    def FetchRoutes(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()
    FetchRoutes.future = None


  def beta_create_RouteDiscoveryService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('envoy.api.v2.RouteDiscoveryService', 'FetchRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.FromString,
      ('envoy.api.v2.RouteDiscoveryService', 'IncrementalRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.IncrementalDiscoveryRequest.FromString,
      ('envoy.api.v2.RouteDiscoveryService', 'StreamRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.FromString,
    }
    response_serializers = {
      ('envoy.api.v2.RouteDiscoveryService', 'FetchRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.SerializeToString,
      ('envoy.api.v2.RouteDiscoveryService', 'IncrementalRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.IncrementalDiscoveryResponse.SerializeToString,
      ('envoy.api.v2.RouteDiscoveryService', 'StreamRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.SerializeToString,
    }
    method_implementations = {
      ('envoy.api.v2.RouteDiscoveryService', 'FetchRoutes'): face_utilities.unary_unary_inline(servicer.FetchRoutes),
      ('envoy.api.v2.RouteDiscoveryService', 'IncrementalRoutes'): face_utilities.stream_stream_inline(servicer.IncrementalRoutes),
      ('envoy.api.v2.RouteDiscoveryService', 'StreamRoutes'): face_utilities.stream_stream_inline(servicer.StreamRoutes),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_RouteDiscoveryService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('envoy.api.v2.RouteDiscoveryService', 'FetchRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.SerializeToString,
      ('envoy.api.v2.RouteDiscoveryService', 'IncrementalRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.IncrementalDiscoveryRequest.SerializeToString,
      ('envoy.api.v2.RouteDiscoveryService', 'StreamRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.SerializeToString,
    }
    response_deserializers = {
      ('envoy.api.v2.RouteDiscoveryService', 'FetchRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.FromString,
      ('envoy.api.v2.RouteDiscoveryService', 'IncrementalRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.IncrementalDiscoveryResponse.FromString,
      ('envoy.api.v2.RouteDiscoveryService', 'StreamRoutes'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.FromString,
    }
    cardinalities = {
      'FetchRoutes': cardinality.Cardinality.UNARY_UNARY,
      'IncrementalRoutes': cardinality.Cardinality.STREAM_STREAM,
      'StreamRoutes': cardinality.Cardinality.STREAM_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'envoy.api.v2.RouteDiscoveryService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
