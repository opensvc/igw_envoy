# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: envoy/service/discovery/v2/ads.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from envoy.api.v2 import discovery_pb2 as envoy_dot_api_dot_v2_dot_discovery__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='envoy/service/discovery/v2/ads.proto',
  package='envoy.service.discovery.v2',
  syntax='proto3',
  serialized_pb=_b('\n$envoy/service/discovery/v2/ads.proto\x12\x1a\x65nvoy.service.discovery.v2\x1a\x1c\x65nvoy/api/v2/discovery.proto\"\n\n\x08\x41\x64sDummy2\xed\x01\n\x1a\x41ggregatedDiscoveryService\x12\x62\n\x19StreamAggregatedResources\x12\x1e.envoy.api.v2.DiscoveryRequest\x1a\x1f.envoy.api.v2.DiscoveryResponse\"\x00(\x01\x30\x01\x12k\n\x18\x44\x65ltaAggregatedResources\x12#.envoy.api.v2.DeltaDiscoveryRequest\x1a$.envoy.api.v2.DeltaDiscoveryResponse\"\x00(\x01\x30\x01\x42=\n(io.envoyproxy.envoy.service.discovery.v2B\x08\x41\x64sProtoP\x01Z\x02v2\x88\x01\x01\x62\x06proto3')
  ,
  dependencies=[envoy_dot_api_dot_v2_dot_discovery__pb2.DESCRIPTOR,])




_ADSDUMMY = _descriptor.Descriptor(
  name='AdsDummy',
  full_name='envoy.service.discovery.v2.AdsDummy',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=98,
  serialized_end=108,
)

DESCRIPTOR.message_types_by_name['AdsDummy'] = _ADSDUMMY
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

AdsDummy = _reflection.GeneratedProtocolMessageType('AdsDummy', (_message.Message,), dict(
  DESCRIPTOR = _ADSDUMMY,
  __module__ = 'envoy.service.discovery.v2.ads_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.discovery.v2.AdsDummy)
  ))
_sym_db.RegisterMessage(AdsDummy)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n(io.envoyproxy.envoy.service.discovery.v2B\010AdsProtoP\001Z\002v2\210\001\001'))

_AGGREGATEDDISCOVERYSERVICE = _descriptor.ServiceDescriptor(
  name='AggregatedDiscoveryService',
  full_name='envoy.service.discovery.v2.AggregatedDiscoveryService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=111,
  serialized_end=348,
  methods=[
  _descriptor.MethodDescriptor(
    name='StreamAggregatedResources',
    full_name='envoy.service.discovery.v2.AggregatedDiscoveryService.StreamAggregatedResources',
    index=0,
    containing_service=None,
    input_type=envoy_dot_api_dot_v2_dot_discovery__pb2._DISCOVERYREQUEST,
    output_type=envoy_dot_api_dot_v2_dot_discovery__pb2._DISCOVERYRESPONSE,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='DeltaAggregatedResources',
    full_name='envoy.service.discovery.v2.AggregatedDiscoveryService.DeltaAggregatedResources',
    index=1,
    containing_service=None,
    input_type=envoy_dot_api_dot_v2_dot_discovery__pb2._DELTADISCOVERYREQUEST,
    output_type=envoy_dot_api_dot_v2_dot_discovery__pb2._DELTADISCOVERYRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_AGGREGATEDDISCOVERYSERVICE)

DESCRIPTOR.services_by_name['AggregatedDiscoveryService'] = _AGGREGATEDDISCOVERYSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class AggregatedDiscoveryServiceStub(object):
    """[#not-implemented-hide:] Discovery services for endpoints, clusters, routes,
    and listeners are retained in the package `envoy.api.v2` for backwards
    compatibility with existing management servers. New development in discovery
    services should proceed in the package `envoy.service.discovery.v2`.

    See https://github.com/lyft/envoy-api#apis for a description of the role of
    ADS and how it is intended to be used by a management server. ADS requests
    have the same structure as their singleton xDS counterparts, but can
    multiplex many resource types on a single stream. The type_url in the
    DiscoveryRequest/DiscoveryResponse provides sufficient information to recover
    the multiplexed singleton APIs at the Envoy instance and management server.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.StreamAggregatedResources = channel.stream_stream(
          '/envoy.service.discovery.v2.AggregatedDiscoveryService/StreamAggregatedResources',
          request_serializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.SerializeToString,
          response_deserializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.FromString,
          )
      self.DeltaAggregatedResources = channel.stream_stream(
          '/envoy.service.discovery.v2.AggregatedDiscoveryService/DeltaAggregatedResources',
          request_serializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DeltaDiscoveryRequest.SerializeToString,
          response_deserializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DeltaDiscoveryResponse.FromString,
          )


  class AggregatedDiscoveryServiceServicer(object):
    """[#not-implemented-hide:] Discovery services for endpoints, clusters, routes,
    and listeners are retained in the package `envoy.api.v2` for backwards
    compatibility with existing management servers. New development in discovery
    services should proceed in the package `envoy.service.discovery.v2`.

    See https://github.com/lyft/envoy-api#apis for a description of the role of
    ADS and how it is intended to be used by a management server. ADS requests
    have the same structure as their singleton xDS counterparts, but can
    multiplex many resource types on a single stream. The type_url in the
    DiscoveryRequest/DiscoveryResponse provides sufficient information to recover
    the multiplexed singleton APIs at the Envoy instance and management server.
    """

    def StreamAggregatedResources(self, request_iterator, context):
      """This is a gRPC-only API.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def DeltaAggregatedResources(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_AggregatedDiscoveryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'StreamAggregatedResources': grpc.stream_stream_rpc_method_handler(
            servicer.StreamAggregatedResources,
            request_deserializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.FromString,
            response_serializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.SerializeToString,
        ),
        'DeltaAggregatedResources': grpc.stream_stream_rpc_method_handler(
            servicer.DeltaAggregatedResources,
            request_deserializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DeltaDiscoveryRequest.FromString,
            response_serializer=envoy_dot_api_dot_v2_dot_discovery__pb2.DeltaDiscoveryResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'envoy.service.discovery.v2.AggregatedDiscoveryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaAggregatedDiscoveryServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#not-implemented-hide:] Discovery services for endpoints, clusters, routes,
    and listeners are retained in the package `envoy.api.v2` for backwards
    compatibility with existing management servers. New development in discovery
    services should proceed in the package `envoy.service.discovery.v2`.

    See https://github.com/lyft/envoy-api#apis for a description of the role of
    ADS and how it is intended to be used by a management server. ADS requests
    have the same structure as their singleton xDS counterparts, but can
    multiplex many resource types on a single stream. The type_url in the
    DiscoveryRequest/DiscoveryResponse provides sufficient information to recover
    the multiplexed singleton APIs at the Envoy instance and management server.
    """
    def StreamAggregatedResources(self, request_iterator, context):
      """This is a gRPC-only API.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def DeltaAggregatedResources(self, request_iterator, context):
      # missing associated documentation comment in .proto file
      pass
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaAggregatedDiscoveryServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#not-implemented-hide:] Discovery services for endpoints, clusters, routes,
    and listeners are retained in the package `envoy.api.v2` for backwards
    compatibility with existing management servers. New development in discovery
    services should proceed in the package `envoy.service.discovery.v2`.

    See https://github.com/lyft/envoy-api#apis for a description of the role of
    ADS and how it is intended to be used by a management server. ADS requests
    have the same structure as their singleton xDS counterparts, but can
    multiplex many resource types on a single stream. The type_url in the
    DiscoveryRequest/DiscoveryResponse provides sufficient information to recover
    the multiplexed singleton APIs at the Envoy instance and management server.
    """
    def StreamAggregatedResources(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """This is a gRPC-only API.
      """
      raise NotImplementedError()
    def DeltaAggregatedResources(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      # missing associated documentation comment in .proto file
      pass
      raise NotImplementedError()


  def beta_create_AggregatedDiscoveryService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('envoy.service.discovery.v2.AggregatedDiscoveryService', 'DeltaAggregatedResources'): envoy_dot_api_dot_v2_dot_discovery__pb2.DeltaDiscoveryRequest.FromString,
      ('envoy.service.discovery.v2.AggregatedDiscoveryService', 'StreamAggregatedResources'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.FromString,
    }
    response_serializers = {
      ('envoy.service.discovery.v2.AggregatedDiscoveryService', 'DeltaAggregatedResources'): envoy_dot_api_dot_v2_dot_discovery__pb2.DeltaDiscoveryResponse.SerializeToString,
      ('envoy.service.discovery.v2.AggregatedDiscoveryService', 'StreamAggregatedResources'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.SerializeToString,
    }
    method_implementations = {
      ('envoy.service.discovery.v2.AggregatedDiscoveryService', 'DeltaAggregatedResources'): face_utilities.stream_stream_inline(servicer.DeltaAggregatedResources),
      ('envoy.service.discovery.v2.AggregatedDiscoveryService', 'StreamAggregatedResources'): face_utilities.stream_stream_inline(servicer.StreamAggregatedResources),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_AggregatedDiscoveryService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('envoy.service.discovery.v2.AggregatedDiscoveryService', 'DeltaAggregatedResources'): envoy_dot_api_dot_v2_dot_discovery__pb2.DeltaDiscoveryRequest.SerializeToString,
      ('envoy.service.discovery.v2.AggregatedDiscoveryService', 'StreamAggregatedResources'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryRequest.SerializeToString,
    }
    response_deserializers = {
      ('envoy.service.discovery.v2.AggregatedDiscoveryService', 'DeltaAggregatedResources'): envoy_dot_api_dot_v2_dot_discovery__pb2.DeltaDiscoveryResponse.FromString,
      ('envoy.service.discovery.v2.AggregatedDiscoveryService', 'StreamAggregatedResources'): envoy_dot_api_dot_v2_dot_discovery__pb2.DiscoveryResponse.FromString,
    }
    cardinalities = {
      'DeltaAggregatedResources': cardinality.Cardinality.STREAM_STREAM,
      'StreamAggregatedResources': cardinality.Cardinality.STREAM_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'envoy.service.discovery.v2.AggregatedDiscoveryService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
