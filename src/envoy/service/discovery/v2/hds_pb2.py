# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: envoy/service/discovery/v2/hds.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from envoy.api.v2.core import base_pb2 as envoy_dot_api_dot_v2_dot_core_dot_base__pb2
from envoy.api.v2.core import health_check_pb2 as envoy_dot_api_dot_v2_dot_core_dot_health__check__pb2
from envoy.api.v2.endpoint import endpoint_pb2 as envoy_dot_api_dot_v2_dot_endpoint_dot_endpoint__pb2
from google.api import annotations_pb2 as google_dot_api_dot_annotations__pb2
from google.protobuf import duration_pb2 as google_dot_protobuf_dot_duration__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='envoy/service/discovery/v2/hds.proto',
  package='envoy.service.discovery.v2',
  syntax='proto3',
  serialized_pb=_b('\n$envoy/service/discovery/v2/hds.proto\x12\x1a\x65nvoy.service.discovery.v2\x1a\x1c\x65nvoy/api/v2/core/base.proto\x1a$envoy/api/v2/core/health_check.proto\x1a$envoy/api/v2/endpoint/endpoint.proto\x1a\x1cgoogle/api/annotations.proto\x1a\x1egoogle/protobuf/duration.proto\"\x87\x01\n\nCapability\x12O\n\x16health_check_protocols\x18\x01 \x03(\x0e\x32/.envoy.service.discovery.v2.Capability.Protocol\"(\n\x08Protocol\x12\x08\n\x04HTTP\x10\x00\x12\x07\n\x03TCP\x10\x01\x12\t\n\x05REDIS\x10\x02\"w\n\x12HealthCheckRequest\x12%\n\x04node\x18\x01 \x01(\x0b\x32\x17.envoy.api.v2.core.Node\x12:\n\ncapability\x18\x02 \x01(\x0b\x32&.envoy.service.discovery.v2.Capability\"{\n\x0e\x45ndpointHealth\x12\x31\n\x08\x65ndpoint\x18\x01 \x01(\x0b\x32\x1f.envoy.api.v2.endpoint.Endpoint\x12\x36\n\rhealth_status\x18\x02 \x01(\x0e\x32\x1f.envoy.api.v2.core.HealthStatus\"^\n\x16\x45ndpointHealthResponse\x12\x44\n\x10\x65ndpoints_health\x18\x01 \x03(\x0b\x32*.envoy.service.discovery.v2.EndpointHealth\"\xe4\x01\n*HealthCheckRequestOrEndpointHealthResponse\x12N\n\x14health_check_request\x18\x01 \x01(\x0b\x32..envoy.service.discovery.v2.HealthCheckRequestH\x00\x12V\n\x18\x65ndpoint_health_response\x18\x02 \x01(\x0b\x32\x32.envoy.service.discovery.v2.EndpointHealthResponseH\x00\x42\x0e\n\x0crequest_type\"v\n\x11LocalityEndpoints\x12-\n\x08locality\x18\x01 \x01(\x0b\x32\x1b.envoy.api.v2.core.Locality\x12\x32\n\tendpoints\x18\x02 \x03(\x0b\x32\x1f.envoy.api.v2.endpoint.Endpoint\"\xac\x01\n\x12\x43lusterHealthCheck\x12\x14\n\x0c\x63luster_name\x18\x01 \x01(\t\x12\x35\n\rhealth_checks\x18\x02 \x03(\x0b\x32\x1e.envoy.api.v2.core.HealthCheck\x12I\n\x12locality_endpoints\x18\x03 \x03(\x0b\x32-.envoy.service.discovery.v2.LocalityEndpoints\"\x92\x01\n\x14HealthCheckSpecifier\x12M\n\x15\x63luster_health_checks\x18\x01 \x03(\x0b\x32..envoy.service.discovery.v2.ClusterHealthCheck\x12+\n\x08interval\x18\x02 \x01(\x0b\x32\x19.google.protobuf.Duration2\xe4\x02\n\x16HealthDiscoveryService\x12\x93\x01\n\x11StreamHealthCheck\x12\x46.envoy.service.discovery.v2.HealthCheckRequestOrEndpointHealthResponse\x1a\x30.envoy.service.discovery.v2.HealthCheckSpecifier\"\x00(\x01\x30\x01\x12\xb3\x01\n\x10\x46\x65tchHealthCheck\x12\x46.envoy.service.discovery.v2.HealthCheckRequestOrEndpointHealthResponse\x1a\x30.envoy.service.discovery.v2.HealthCheckSpecifier\"%\x82\xd3\xe4\x93\x02\x1f\"\x1a/v2/discovery:health_check:\x01*B9\n(io.envoyproxy.envoy.service.discovery.v2B\x08HdsProtoP\x01\x88\x01\x01\x62\x06proto3')
  ,
  dependencies=[envoy_dot_api_dot_v2_dot_core_dot_base__pb2.DESCRIPTOR,envoy_dot_api_dot_v2_dot_core_dot_health__check__pb2.DESCRIPTOR,envoy_dot_api_dot_v2_dot_endpoint_dot_endpoint__pb2.DESCRIPTOR,google_dot_api_dot_annotations__pb2.DESCRIPTOR,google_dot_protobuf_dot_duration__pb2.DESCRIPTOR,])



_CAPABILITY_PROTOCOL = _descriptor.EnumDescriptor(
  name='Protocol',
  full_name='envoy.service.discovery.v2.Capability.Protocol',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='HTTP', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='TCP', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='REDIS', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=332,
  serialized_end=372,
)
_sym_db.RegisterEnumDescriptor(_CAPABILITY_PROTOCOL)


_CAPABILITY = _descriptor.Descriptor(
  name='Capability',
  full_name='envoy.service.discovery.v2.Capability',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='health_check_protocols', full_name='envoy.service.discovery.v2.Capability.health_check_protocols', index=0,
      number=1, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _CAPABILITY_PROTOCOL,
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=237,
  serialized_end=372,
)


_HEALTHCHECKREQUEST = _descriptor.Descriptor(
  name='HealthCheckRequest',
  full_name='envoy.service.discovery.v2.HealthCheckRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='node', full_name='envoy.service.discovery.v2.HealthCheckRequest.node', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='capability', full_name='envoy.service.discovery.v2.HealthCheckRequest.capability', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=374,
  serialized_end=493,
)


_ENDPOINTHEALTH = _descriptor.Descriptor(
  name='EndpointHealth',
  full_name='envoy.service.discovery.v2.EndpointHealth',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='endpoint', full_name='envoy.service.discovery.v2.EndpointHealth.endpoint', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='health_status', full_name='envoy.service.discovery.v2.EndpointHealth.health_status', index=1,
      number=2, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=495,
  serialized_end=618,
)


_ENDPOINTHEALTHRESPONSE = _descriptor.Descriptor(
  name='EndpointHealthResponse',
  full_name='envoy.service.discovery.v2.EndpointHealthResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='endpoints_health', full_name='envoy.service.discovery.v2.EndpointHealthResponse.endpoints_health', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=620,
  serialized_end=714,
)


_HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE = _descriptor.Descriptor(
  name='HealthCheckRequestOrEndpointHealthResponse',
  full_name='envoy.service.discovery.v2.HealthCheckRequestOrEndpointHealthResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='health_check_request', full_name='envoy.service.discovery.v2.HealthCheckRequestOrEndpointHealthResponse.health_check_request', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='endpoint_health_response', full_name='envoy.service.discovery.v2.HealthCheckRequestOrEndpointHealthResponse.endpoint_health_response', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='request_type', full_name='envoy.service.discovery.v2.HealthCheckRequestOrEndpointHealthResponse.request_type',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=717,
  serialized_end=945,
)


_LOCALITYENDPOINTS = _descriptor.Descriptor(
  name='LocalityEndpoints',
  full_name='envoy.service.discovery.v2.LocalityEndpoints',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='locality', full_name='envoy.service.discovery.v2.LocalityEndpoints.locality', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='endpoints', full_name='envoy.service.discovery.v2.LocalityEndpoints.endpoints', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=947,
  serialized_end=1065,
)


_CLUSTERHEALTHCHECK = _descriptor.Descriptor(
  name='ClusterHealthCheck',
  full_name='envoy.service.discovery.v2.ClusterHealthCheck',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cluster_name', full_name='envoy.service.discovery.v2.ClusterHealthCheck.cluster_name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='health_checks', full_name='envoy.service.discovery.v2.ClusterHealthCheck.health_checks', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='locality_endpoints', full_name='envoy.service.discovery.v2.ClusterHealthCheck.locality_endpoints', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1068,
  serialized_end=1240,
)


_HEALTHCHECKSPECIFIER = _descriptor.Descriptor(
  name='HealthCheckSpecifier',
  full_name='envoy.service.discovery.v2.HealthCheckSpecifier',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='cluster_health_checks', full_name='envoy.service.discovery.v2.HealthCheckSpecifier.cluster_health_checks', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='interval', full_name='envoy.service.discovery.v2.HealthCheckSpecifier.interval', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1243,
  serialized_end=1389,
)

_CAPABILITY.fields_by_name['health_check_protocols'].enum_type = _CAPABILITY_PROTOCOL
_CAPABILITY_PROTOCOL.containing_type = _CAPABILITY
_HEALTHCHECKREQUEST.fields_by_name['node'].message_type = envoy_dot_api_dot_v2_dot_core_dot_base__pb2._NODE
_HEALTHCHECKREQUEST.fields_by_name['capability'].message_type = _CAPABILITY
_ENDPOINTHEALTH.fields_by_name['endpoint'].message_type = envoy_dot_api_dot_v2_dot_endpoint_dot_endpoint__pb2._ENDPOINT
_ENDPOINTHEALTH.fields_by_name['health_status'].enum_type = envoy_dot_api_dot_v2_dot_core_dot_health__check__pb2._HEALTHSTATUS
_ENDPOINTHEALTHRESPONSE.fields_by_name['endpoints_health'].message_type = _ENDPOINTHEALTH
_HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE.fields_by_name['health_check_request'].message_type = _HEALTHCHECKREQUEST
_HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE.fields_by_name['endpoint_health_response'].message_type = _ENDPOINTHEALTHRESPONSE
_HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE.oneofs_by_name['request_type'].fields.append(
  _HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE.fields_by_name['health_check_request'])
_HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE.fields_by_name['health_check_request'].containing_oneof = _HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE.oneofs_by_name['request_type']
_HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE.oneofs_by_name['request_type'].fields.append(
  _HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE.fields_by_name['endpoint_health_response'])
_HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE.fields_by_name['endpoint_health_response'].containing_oneof = _HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE.oneofs_by_name['request_type']
_LOCALITYENDPOINTS.fields_by_name['locality'].message_type = envoy_dot_api_dot_v2_dot_core_dot_base__pb2._LOCALITY
_LOCALITYENDPOINTS.fields_by_name['endpoints'].message_type = envoy_dot_api_dot_v2_dot_endpoint_dot_endpoint__pb2._ENDPOINT
_CLUSTERHEALTHCHECK.fields_by_name['health_checks'].message_type = envoy_dot_api_dot_v2_dot_core_dot_health__check__pb2._HEALTHCHECK
_CLUSTERHEALTHCHECK.fields_by_name['locality_endpoints'].message_type = _LOCALITYENDPOINTS
_HEALTHCHECKSPECIFIER.fields_by_name['cluster_health_checks'].message_type = _CLUSTERHEALTHCHECK
_HEALTHCHECKSPECIFIER.fields_by_name['interval'].message_type = google_dot_protobuf_dot_duration__pb2._DURATION
DESCRIPTOR.message_types_by_name['Capability'] = _CAPABILITY
DESCRIPTOR.message_types_by_name['HealthCheckRequest'] = _HEALTHCHECKREQUEST
DESCRIPTOR.message_types_by_name['EndpointHealth'] = _ENDPOINTHEALTH
DESCRIPTOR.message_types_by_name['EndpointHealthResponse'] = _ENDPOINTHEALTHRESPONSE
DESCRIPTOR.message_types_by_name['HealthCheckRequestOrEndpointHealthResponse'] = _HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE
DESCRIPTOR.message_types_by_name['LocalityEndpoints'] = _LOCALITYENDPOINTS
DESCRIPTOR.message_types_by_name['ClusterHealthCheck'] = _CLUSTERHEALTHCHECK
DESCRIPTOR.message_types_by_name['HealthCheckSpecifier'] = _HEALTHCHECKSPECIFIER
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Capability = _reflection.GeneratedProtocolMessageType('Capability', (_message.Message,), dict(
  DESCRIPTOR = _CAPABILITY,
  __module__ = 'envoy.service.discovery.v2.hds_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.discovery.v2.Capability)
  ))
_sym_db.RegisterMessage(Capability)

HealthCheckRequest = _reflection.GeneratedProtocolMessageType('HealthCheckRequest', (_message.Message,), dict(
  DESCRIPTOR = _HEALTHCHECKREQUEST,
  __module__ = 'envoy.service.discovery.v2.hds_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.discovery.v2.HealthCheckRequest)
  ))
_sym_db.RegisterMessage(HealthCheckRequest)

EndpointHealth = _reflection.GeneratedProtocolMessageType('EndpointHealth', (_message.Message,), dict(
  DESCRIPTOR = _ENDPOINTHEALTH,
  __module__ = 'envoy.service.discovery.v2.hds_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.discovery.v2.EndpointHealth)
  ))
_sym_db.RegisterMessage(EndpointHealth)

EndpointHealthResponse = _reflection.GeneratedProtocolMessageType('EndpointHealthResponse', (_message.Message,), dict(
  DESCRIPTOR = _ENDPOINTHEALTHRESPONSE,
  __module__ = 'envoy.service.discovery.v2.hds_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.discovery.v2.EndpointHealthResponse)
  ))
_sym_db.RegisterMessage(EndpointHealthResponse)

HealthCheckRequestOrEndpointHealthResponse = _reflection.GeneratedProtocolMessageType('HealthCheckRequestOrEndpointHealthResponse', (_message.Message,), dict(
  DESCRIPTOR = _HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE,
  __module__ = 'envoy.service.discovery.v2.hds_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.discovery.v2.HealthCheckRequestOrEndpointHealthResponse)
  ))
_sym_db.RegisterMessage(HealthCheckRequestOrEndpointHealthResponse)

LocalityEndpoints = _reflection.GeneratedProtocolMessageType('LocalityEndpoints', (_message.Message,), dict(
  DESCRIPTOR = _LOCALITYENDPOINTS,
  __module__ = 'envoy.service.discovery.v2.hds_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.discovery.v2.LocalityEndpoints)
  ))
_sym_db.RegisterMessage(LocalityEndpoints)

ClusterHealthCheck = _reflection.GeneratedProtocolMessageType('ClusterHealthCheck', (_message.Message,), dict(
  DESCRIPTOR = _CLUSTERHEALTHCHECK,
  __module__ = 'envoy.service.discovery.v2.hds_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.discovery.v2.ClusterHealthCheck)
  ))
_sym_db.RegisterMessage(ClusterHealthCheck)

HealthCheckSpecifier = _reflection.GeneratedProtocolMessageType('HealthCheckSpecifier', (_message.Message,), dict(
  DESCRIPTOR = _HEALTHCHECKSPECIFIER,
  __module__ = 'envoy.service.discovery.v2.hds_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.discovery.v2.HealthCheckSpecifier)
  ))
_sym_db.RegisterMessage(HealthCheckSpecifier)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n(io.envoyproxy.envoy.service.discovery.v2B\010HdsProtoP\001\210\001\001'))

_HEALTHDISCOVERYSERVICE = _descriptor.ServiceDescriptor(
  name='HealthDiscoveryService',
  full_name='envoy.service.discovery.v2.HealthDiscoveryService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=1392,
  serialized_end=1748,
  methods=[
  _descriptor.MethodDescriptor(
    name='StreamHealthCheck',
    full_name='envoy.service.discovery.v2.HealthDiscoveryService.StreamHealthCheck',
    index=0,
    containing_service=None,
    input_type=_HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE,
    output_type=_HEALTHCHECKSPECIFIER,
    options=None,
  ),
  _descriptor.MethodDescriptor(
    name='FetchHealthCheck',
    full_name='envoy.service.discovery.v2.HealthDiscoveryService.FetchHealthCheck',
    index=1,
    containing_service=None,
    input_type=_HEALTHCHECKREQUESTORENDPOINTHEALTHRESPONSE,
    output_type=_HEALTHCHECKSPECIFIER,
    options=_descriptor._ParseOptions(descriptor_pb2.MethodOptions(), _b('\202\323\344\223\002\037\"\032/v2/discovery:health_check:\001*')),
  ),
])
_sym_db.RegisterServiceDescriptor(_HEALTHDISCOVERYSERVICE)

DESCRIPTOR.services_by_name['HealthDiscoveryService'] = _HEALTHDISCOVERYSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class HealthDiscoveryServiceStub(object):
    """[#proto-status: experimental]
    HDS is Health Discovery Service. It compliments Envoy’s health checking
    service by designating this Envoy to be a healthchecker for a subset of hosts
    in the cluster. The status of these health checks will be reported to the
    management server, where it can be aggregated etc and redistributed back to
    Envoy through EDS.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.StreamHealthCheck = channel.stream_stream(
          '/envoy.service.discovery.v2.HealthDiscoveryService/StreamHealthCheck',
          request_serializer=HealthCheckRequestOrEndpointHealthResponse.SerializeToString,
          response_deserializer=HealthCheckSpecifier.FromString,
          )
      self.FetchHealthCheck = channel.unary_unary(
          '/envoy.service.discovery.v2.HealthDiscoveryService/FetchHealthCheck',
          request_serializer=HealthCheckRequestOrEndpointHealthResponse.SerializeToString,
          response_deserializer=HealthCheckSpecifier.FromString,
          )


  class HealthDiscoveryServiceServicer(object):
    """[#proto-status: experimental]
    HDS is Health Discovery Service. It compliments Envoy’s health checking
    service by designating this Envoy to be a healthchecker for a subset of hosts
    in the cluster. The status of these health checks will be reported to the
    management server, where it can be aggregated etc and redistributed back to
    Envoy through EDS.
    """

    def StreamHealthCheck(self, request_iterator, context):
      """1. Envoy starts up and if its can_healthcheck option in the static
      bootstrap config is enabled, sends HealthCheckRequest to the management
      server. It supplies its capabilities (which protocol it can health check
      with, what zone it resides in, etc.).
      2. In response to (1), the management server designates this Envoy as a
      healthchecker to health check a subset of all upstream hosts for a given
      cluster (for example upstream Host 1 and Host 2). It streams
      HealthCheckSpecifier messages with cluster related configuration for all
      clusters this Envoy is designated to health check. Subsequent
      HealthCheckSpecifier message will be sent on changes to:
      a. Endpoints to health checks
      b. Per cluster configuration change
      3. Envoy creates a health probe based on the HealthCheck config and sends
      it to endpoint(ip:port) of Host 1 and 2. Based on the HealthCheck
      configuration Envoy waits upon the arrival of the probe response and
      looks at the content of the response to decide whether the endpoint is
      healthy or not. If a response hasn't been received within the timeout
      interval, the endpoint health status is considered TIMEOUT.
      4. Envoy reports results back in an EndpointHealthResponse message.
      Envoy streams responses as often as the interval configured by the
      management server in HealthCheckSpecifier.
      5. The management Server collects health statuses for all endpoints in the
      cluster (for all clusters) and uses this information to construct
      EndpointDiscoveryResponse messages.
      6. Once Envoy has a list of upstream endpoints to send traffic to, it load
      balances traffic to them without additional health checking. It may
      use inline healthcheck (i.e. consider endpoint UNHEALTHY if connection
      failed to a particular endpoint to account for health status propagation
      delay between HDS and EDS).
      By default, can_healthcheck is true. If can_healthcheck is false, Cluster
      configuration may not contain HealthCheck message.
      TODO(htuch): How is can_healthcheck communicated to CDS to ensure the above
      invariant?
      TODO(htuch): Add @amb67's diagram.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def FetchHealthCheck(self, request, context):
      """TODO(htuch): Unlike the gRPC version, there is no stream-based binding of
      request/response. Should we add an identifier to the HealthCheckSpecifier
      to bind with the response?
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_HealthDiscoveryServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'StreamHealthCheck': grpc.stream_stream_rpc_method_handler(
            servicer.StreamHealthCheck,
            request_deserializer=HealthCheckRequestOrEndpointHealthResponse.FromString,
            response_serializer=HealthCheckSpecifier.SerializeToString,
        ),
        'FetchHealthCheck': grpc.unary_unary_rpc_method_handler(
            servicer.FetchHealthCheck,
            request_deserializer=HealthCheckRequestOrEndpointHealthResponse.FromString,
            response_serializer=HealthCheckSpecifier.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'envoy.service.discovery.v2.HealthDiscoveryService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaHealthDiscoveryServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#proto-status: experimental]
    HDS is Health Discovery Service. It compliments Envoy’s health checking
    service by designating this Envoy to be a healthchecker for a subset of hosts
    in the cluster. The status of these health checks will be reported to the
    management server, where it can be aggregated etc and redistributed back to
    Envoy through EDS.
    """
    def StreamHealthCheck(self, request_iterator, context):
      """1. Envoy starts up and if its can_healthcheck option in the static
      bootstrap config is enabled, sends HealthCheckRequest to the management
      server. It supplies its capabilities (which protocol it can health check
      with, what zone it resides in, etc.).
      2. In response to (1), the management server designates this Envoy as a
      healthchecker to health check a subset of all upstream hosts for a given
      cluster (for example upstream Host 1 and Host 2). It streams
      HealthCheckSpecifier messages with cluster related configuration for all
      clusters this Envoy is designated to health check. Subsequent
      HealthCheckSpecifier message will be sent on changes to:
      a. Endpoints to health checks
      b. Per cluster configuration change
      3. Envoy creates a health probe based on the HealthCheck config and sends
      it to endpoint(ip:port) of Host 1 and 2. Based on the HealthCheck
      configuration Envoy waits upon the arrival of the probe response and
      looks at the content of the response to decide whether the endpoint is
      healthy or not. If a response hasn't been received within the timeout
      interval, the endpoint health status is considered TIMEOUT.
      4. Envoy reports results back in an EndpointHealthResponse message.
      Envoy streams responses as often as the interval configured by the
      management server in HealthCheckSpecifier.
      5. The management Server collects health statuses for all endpoints in the
      cluster (for all clusters) and uses this information to construct
      EndpointDiscoveryResponse messages.
      6. Once Envoy has a list of upstream endpoints to send traffic to, it load
      balances traffic to them without additional health checking. It may
      use inline healthcheck (i.e. consider endpoint UNHEALTHY if connection
      failed to a particular endpoint to account for health status propagation
      delay between HDS and EDS).
      By default, can_healthcheck is true. If can_healthcheck is false, Cluster
      configuration may not contain HealthCheck message.
      TODO(htuch): How is can_healthcheck communicated to CDS to ensure the above
      invariant?
      TODO(htuch): Add @amb67's diagram.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def FetchHealthCheck(self, request, context):
      """TODO(htuch): Unlike the gRPC version, there is no stream-based binding of
      request/response. Should we add an identifier to the HealthCheckSpecifier
      to bind with the response?
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaHealthDiscoveryServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#proto-status: experimental]
    HDS is Health Discovery Service. It compliments Envoy’s health checking
    service by designating this Envoy to be a healthchecker for a subset of hosts
    in the cluster. The status of these health checks will be reported to the
    management server, where it can be aggregated etc and redistributed back to
    Envoy through EDS.
    """
    def StreamHealthCheck(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """1. Envoy starts up and if its can_healthcheck option in the static
      bootstrap config is enabled, sends HealthCheckRequest to the management
      server. It supplies its capabilities (which protocol it can health check
      with, what zone it resides in, etc.).
      2. In response to (1), the management server designates this Envoy as a
      healthchecker to health check a subset of all upstream hosts for a given
      cluster (for example upstream Host 1 and Host 2). It streams
      HealthCheckSpecifier messages with cluster related configuration for all
      clusters this Envoy is designated to health check. Subsequent
      HealthCheckSpecifier message will be sent on changes to:
      a. Endpoints to health checks
      b. Per cluster configuration change
      3. Envoy creates a health probe based on the HealthCheck config and sends
      it to endpoint(ip:port) of Host 1 and 2. Based on the HealthCheck
      configuration Envoy waits upon the arrival of the probe response and
      looks at the content of the response to decide whether the endpoint is
      healthy or not. If a response hasn't been received within the timeout
      interval, the endpoint health status is considered TIMEOUT.
      4. Envoy reports results back in an EndpointHealthResponse message.
      Envoy streams responses as often as the interval configured by the
      management server in HealthCheckSpecifier.
      5. The management Server collects health statuses for all endpoints in the
      cluster (for all clusters) and uses this information to construct
      EndpointDiscoveryResponse messages.
      6. Once Envoy has a list of upstream endpoints to send traffic to, it load
      balances traffic to them without additional health checking. It may
      use inline healthcheck (i.e. consider endpoint UNHEALTHY if connection
      failed to a particular endpoint to account for health status propagation
      delay between HDS and EDS).
      By default, can_healthcheck is true. If can_healthcheck is false, Cluster
      configuration may not contain HealthCheck message.
      TODO(htuch): How is can_healthcheck communicated to CDS to ensure the above
      invariant?
      TODO(htuch): Add @amb67's diagram.
      """
      raise NotImplementedError()
    def FetchHealthCheck(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """TODO(htuch): Unlike the gRPC version, there is no stream-based binding of
      request/response. Should we add an identifier to the HealthCheckSpecifier
      to bind with the response?
      """
      raise NotImplementedError()
    FetchHealthCheck.future = None


  def beta_create_HealthDiscoveryService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('envoy.service.discovery.v2.HealthDiscoveryService', 'FetchHealthCheck'): HealthCheckRequestOrEndpointHealthResponse.FromString,
      ('envoy.service.discovery.v2.HealthDiscoveryService', 'StreamHealthCheck'): HealthCheckRequestOrEndpointHealthResponse.FromString,
    }
    response_serializers = {
      ('envoy.service.discovery.v2.HealthDiscoveryService', 'FetchHealthCheck'): HealthCheckSpecifier.SerializeToString,
      ('envoy.service.discovery.v2.HealthDiscoveryService', 'StreamHealthCheck'): HealthCheckSpecifier.SerializeToString,
    }
    method_implementations = {
      ('envoy.service.discovery.v2.HealthDiscoveryService', 'FetchHealthCheck'): face_utilities.unary_unary_inline(servicer.FetchHealthCheck),
      ('envoy.service.discovery.v2.HealthDiscoveryService', 'StreamHealthCheck'): face_utilities.stream_stream_inline(servicer.StreamHealthCheck),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_HealthDiscoveryService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('envoy.service.discovery.v2.HealthDiscoveryService', 'FetchHealthCheck'): HealthCheckRequestOrEndpointHealthResponse.SerializeToString,
      ('envoy.service.discovery.v2.HealthDiscoveryService', 'StreamHealthCheck'): HealthCheckRequestOrEndpointHealthResponse.SerializeToString,
    }
    response_deserializers = {
      ('envoy.service.discovery.v2.HealthDiscoveryService', 'FetchHealthCheck'): HealthCheckSpecifier.FromString,
      ('envoy.service.discovery.v2.HealthDiscoveryService', 'StreamHealthCheck'): HealthCheckSpecifier.FromString,
    }
    cardinalities = {
      'FetchHealthCheck': cardinality.Cardinality.UNARY_UNARY,
      'StreamHealthCheck': cardinality.Cardinality.STREAM_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'envoy.service.discovery.v2.HealthDiscoveryService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
