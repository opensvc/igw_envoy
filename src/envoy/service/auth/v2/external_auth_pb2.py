# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: envoy/service/auth/v2/external_auth.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from envoy.api.v2.core import base_pb2 as envoy_dot_api_dot_v2_dot_core_dot_base__pb2
from envoy.type import http_status_pb2 as envoy_dot_type_dot_http__status__pb2
from envoy.service.auth.v2 import attribute_context_pb2 as envoy_dot_service_dot_auth_dot_v2_dot_attribute__context__pb2
from google.rpc import status_pb2 as google_dot_rpc_dot_status__pb2
from validate import validate_pb2 as validate_dot_validate__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='envoy/service/auth/v2/external_auth.proto',
  package='envoy.service.auth.v2',
  syntax='proto3',
  serialized_pb=_b('\n)envoy/service/auth/v2/external_auth.proto\x12\x15\x65nvoy.service.auth.v2\x1a\x1c\x65nvoy/api/v2/core/base.proto\x1a\x1c\x65nvoy/type/http_status.proto\x1a-envoy/service/auth/v2/attribute_context.proto\x1a\x17google/rpc/status.proto\x1a\x17validate/validate.proto\"K\n\x0c\x43heckRequest\x12;\n\nattributes\x18\x01 \x01(\x0b\x32\'.envoy.service.auth.v2.AttributeContext\"\x8d\x01\n\x12\x44\x65niedHttpResponse\x12\x32\n\x06status\x18\x01 \x01(\x0b\x32\x16.envoy.type.HttpStatusB\n\xba\xe9\xc0\x03\x05\x8a\x01\x02\x10\x01\x12\x35\n\x07headers\x18\x02 \x03(\x0b\x32$.envoy.api.v2.core.HeaderValueOption\x12\x0c\n\x04\x62ody\x18\x03 \x01(\t\"G\n\x0eOkHttpResponse\x12\x35\n\x07headers\x18\x02 \x03(\x0b\x32$.envoy.api.v2.core.HeaderValueOption\"\xc8\x01\n\rCheckResponse\x12\"\n\x06status\x18\x01 \x01(\x0b\x32\x12.google.rpc.Status\x12\x44\n\x0f\x64\x65nied_response\x18\x02 \x01(\x0b\x32).envoy.service.auth.v2.DeniedHttpResponseH\x00\x12<\n\x0bok_response\x18\x03 \x01(\x0b\x32%.envoy.service.auth.v2.OkHttpResponseH\x00\x42\x0f\n\rhttp_response2c\n\rAuthorization\x12R\n\x05\x43heck\x12#.envoy.service.auth.v2.CheckRequest\x1a$.envoy.service.auth.v2.CheckResponseBA\n#io.envoyproxy.envoy.service.auth.v2B\x11\x45xternalAuthProtoP\x01Z\x02v2\x88\x01\x01\x62\x06proto3')
  ,
  dependencies=[envoy_dot_api_dot_v2_dot_core_dot_base__pb2.DESCRIPTOR,envoy_dot_type_dot_http__status__pb2.DESCRIPTOR,envoy_dot_service_dot_auth_dot_v2_dot_attribute__context__pb2.DESCRIPTOR,google_dot_rpc_dot_status__pb2.DESCRIPTOR,validate_dot_validate__pb2.DESCRIPTOR,])




_CHECKREQUEST = _descriptor.Descriptor(
  name='CheckRequest',
  full_name='envoy.service.auth.v2.CheckRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='attributes', full_name='envoy.service.auth.v2.CheckRequest.attributes', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=225,
  serialized_end=300,
)


_DENIEDHTTPRESPONSE = _descriptor.Descriptor(
  name='DeniedHttpResponse',
  full_name='envoy.service.auth.v2.DeniedHttpResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='envoy.service.auth.v2.DeniedHttpResponse.status', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\005\212\001\002\020\001'))),
    _descriptor.FieldDescriptor(
      name='headers', full_name='envoy.service.auth.v2.DeniedHttpResponse.headers', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='body', full_name='envoy.service.auth.v2.DeniedHttpResponse.body', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=303,
  serialized_end=444,
)


_OKHTTPRESPONSE = _descriptor.Descriptor(
  name='OkHttpResponse',
  full_name='envoy.service.auth.v2.OkHttpResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='headers', full_name='envoy.service.auth.v2.OkHttpResponse.headers', index=0,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=446,
  serialized_end=517,
)


_CHECKRESPONSE = _descriptor.Descriptor(
  name='CheckResponse',
  full_name='envoy.service.auth.v2.CheckResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='status', full_name='envoy.service.auth.v2.CheckResponse.status', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='denied_response', full_name='envoy.service.auth.v2.CheckResponse.denied_response', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='ok_response', full_name='envoy.service.auth.v2.CheckResponse.ok_response', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='http_response', full_name='envoy.service.auth.v2.CheckResponse.http_response',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=520,
  serialized_end=720,
)

_CHECKREQUEST.fields_by_name['attributes'].message_type = envoy_dot_service_dot_auth_dot_v2_dot_attribute__context__pb2._ATTRIBUTECONTEXT
_DENIEDHTTPRESPONSE.fields_by_name['status'].message_type = envoy_dot_type_dot_http__status__pb2._HTTPSTATUS
_DENIEDHTTPRESPONSE.fields_by_name['headers'].message_type = envoy_dot_api_dot_v2_dot_core_dot_base__pb2._HEADERVALUEOPTION
_OKHTTPRESPONSE.fields_by_name['headers'].message_type = envoy_dot_api_dot_v2_dot_core_dot_base__pb2._HEADERVALUEOPTION
_CHECKRESPONSE.fields_by_name['status'].message_type = google_dot_rpc_dot_status__pb2._STATUS
_CHECKRESPONSE.fields_by_name['denied_response'].message_type = _DENIEDHTTPRESPONSE
_CHECKRESPONSE.fields_by_name['ok_response'].message_type = _OKHTTPRESPONSE
_CHECKRESPONSE.oneofs_by_name['http_response'].fields.append(
  _CHECKRESPONSE.fields_by_name['denied_response'])
_CHECKRESPONSE.fields_by_name['denied_response'].containing_oneof = _CHECKRESPONSE.oneofs_by_name['http_response']
_CHECKRESPONSE.oneofs_by_name['http_response'].fields.append(
  _CHECKRESPONSE.fields_by_name['ok_response'])
_CHECKRESPONSE.fields_by_name['ok_response'].containing_oneof = _CHECKRESPONSE.oneofs_by_name['http_response']
DESCRIPTOR.message_types_by_name['CheckRequest'] = _CHECKREQUEST
DESCRIPTOR.message_types_by_name['DeniedHttpResponse'] = _DENIEDHTTPRESPONSE
DESCRIPTOR.message_types_by_name['OkHttpResponse'] = _OKHTTPRESPONSE
DESCRIPTOR.message_types_by_name['CheckResponse'] = _CHECKRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

CheckRequest = _reflection.GeneratedProtocolMessageType('CheckRequest', (_message.Message,), dict(
  DESCRIPTOR = _CHECKREQUEST,
  __module__ = 'envoy.service.auth.v2.external_auth_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.auth.v2.CheckRequest)
  ))
_sym_db.RegisterMessage(CheckRequest)

DeniedHttpResponse = _reflection.GeneratedProtocolMessageType('DeniedHttpResponse', (_message.Message,), dict(
  DESCRIPTOR = _DENIEDHTTPRESPONSE,
  __module__ = 'envoy.service.auth.v2.external_auth_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.auth.v2.DeniedHttpResponse)
  ))
_sym_db.RegisterMessage(DeniedHttpResponse)

OkHttpResponse = _reflection.GeneratedProtocolMessageType('OkHttpResponse', (_message.Message,), dict(
  DESCRIPTOR = _OKHTTPRESPONSE,
  __module__ = 'envoy.service.auth.v2.external_auth_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.auth.v2.OkHttpResponse)
  ))
_sym_db.RegisterMessage(OkHttpResponse)

CheckResponse = _reflection.GeneratedProtocolMessageType('CheckResponse', (_message.Message,), dict(
  DESCRIPTOR = _CHECKRESPONSE,
  __module__ = 'envoy.service.auth.v2.external_auth_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.auth.v2.CheckResponse)
  ))
_sym_db.RegisterMessage(CheckResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n#io.envoyproxy.envoy.service.auth.v2B\021ExternalAuthProtoP\001Z\002v2\210\001\001'))
_DENIEDHTTPRESPONSE.fields_by_name['status'].has_options = True
_DENIEDHTTPRESPONSE.fields_by_name['status']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\005\212\001\002\020\001'))

_AUTHORIZATION = _descriptor.ServiceDescriptor(
  name='Authorization',
  full_name='envoy.service.auth.v2.Authorization',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=722,
  serialized_end=821,
  methods=[
  _descriptor.MethodDescriptor(
    name='Check',
    full_name='envoy.service.auth.v2.Authorization.Check',
    index=0,
    containing_service=None,
    input_type=_CHECKREQUEST,
    output_type=_CHECKRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_AUTHORIZATION)

DESCRIPTOR.services_by_name['Authorization'] = _AUTHORIZATION

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class AuthorizationStub(object):
    """[#protodoc-title: Authorization Service ]

    The authorization service request messages used by external authorization :ref:`network filter
    <config_network_filters_ext_authz>` and :ref:`HTTP filter <config_http_filters_ext_authz>`.

    A generic interface for performing authorization check on incoming
    requests to a networked service.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.Check = channel.unary_unary(
          '/envoy.service.auth.v2.Authorization/Check',
          request_serializer=CheckRequest.SerializeToString,
          response_deserializer=CheckResponse.FromString,
          )


  class AuthorizationServicer(object):
    """[#protodoc-title: Authorization Service ]

    The authorization service request messages used by external authorization :ref:`network filter
    <config_network_filters_ext_authz>` and :ref:`HTTP filter <config_http_filters_ext_authz>`.

    A generic interface for performing authorization check on incoming
    requests to a networked service.
    """

    def Check(self, request, context):
      """Performs authorization check based on the attributes associated with the
      incoming request, and returns status `OK` or not `OK`.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_AuthorizationServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'Check': grpc.unary_unary_rpc_method_handler(
            servicer.Check,
            request_deserializer=CheckRequest.FromString,
            response_serializer=CheckResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'envoy.service.auth.v2.Authorization', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaAuthorizationServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#protodoc-title: Authorization Service ]

    The authorization service request messages used by external authorization :ref:`network filter
    <config_network_filters_ext_authz>` and :ref:`HTTP filter <config_http_filters_ext_authz>`.

    A generic interface for performing authorization check on incoming
    requests to a networked service.
    """
    def Check(self, request, context):
      """Performs authorization check based on the attributes associated with the
      incoming request, and returns status `OK` or not `OK`.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaAuthorizationStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#protodoc-title: Authorization Service ]

    The authorization service request messages used by external authorization :ref:`network filter
    <config_network_filters_ext_authz>` and :ref:`HTTP filter <config_http_filters_ext_authz>`.

    A generic interface for performing authorization check on incoming
    requests to a networked service.
    """
    def Check(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Performs authorization check based on the attributes associated with the
      incoming request, and returns status `OK` or not `OK`.
      """
      raise NotImplementedError()
    Check.future = None


  def beta_create_Authorization_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('envoy.service.auth.v2.Authorization', 'Check'): CheckRequest.FromString,
    }
    response_serializers = {
      ('envoy.service.auth.v2.Authorization', 'Check'): CheckResponse.SerializeToString,
    }
    method_implementations = {
      ('envoy.service.auth.v2.Authorization', 'Check'): face_utilities.unary_unary_inline(servicer.Check),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Authorization_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('envoy.service.auth.v2.Authorization', 'Check'): CheckRequest.SerializeToString,
    }
    response_deserializers = {
      ('envoy.service.auth.v2.Authorization', 'Check'): CheckResponse.FromString,
    }
    cardinalities = {
      'Check': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'envoy.service.auth.v2.Authorization', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
