# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: envoy/service/load_stats/v2/lrs.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from envoy.api.v2.core import base_pb2 as envoy_dot_api_dot_v2_dot_core_dot_base__pb2
from envoy.api.v2.endpoint import load_report_pb2 as envoy_dot_api_dot_v2_dot_endpoint_dot_load__report__pb2
from google.protobuf import duration_pb2 as google_dot_protobuf_dot_duration__pb2
from validate import validate_pb2 as validate_dot_validate__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='envoy/service/load_stats/v2/lrs.proto',
  package='envoy.service.load_stats.v2',
  syntax='proto3',
  serialized_pb=_b('\n%envoy/service/load_stats/v2/lrs.proto\x12\x1b\x65nvoy.service.load_stats.v2\x1a\x1c\x65nvoy/api/v2/core/base.proto\x1a\'envoy/api/v2/endpoint/load_report.proto\x1a\x1egoogle/protobuf/duration.proto\x1a\x17validate/validate.proto\"u\n\x10LoadStatsRequest\x12%\n\x04node\x18\x01 \x01(\x0b\x32\x17.envoy.api.v2.core.Node\x12:\n\rcluster_stats\x18\x02 \x03(\x0b\x32#.envoy.api.v2.endpoint.ClusterStats\"m\n\x11LoadStatsResponse\x12\x1c\n\x08\x63lusters\x18\x01 \x03(\tB\n\xba\xe9\xc0\x03\x05\x92\x01\x02\x08\x01\x12:\n\x17load_reporting_interval\x18\x02 \x01(\x0b\x32\x19.google.protobuf.Duration2\x8e\x01\n\x14LoadReportingService\x12v\n\x0fStreamLoadStats\x12-.envoy.service.load_stats.v2.LoadStatsRequest\x1a..envoy.service.load_stats.v2.LoadStatsResponse\"\x00(\x01\x30\x01\x42\x07Z\x02v2\x88\x01\x01\x62\x06proto3')
  ,
  dependencies=[envoy_dot_api_dot_v2_dot_core_dot_base__pb2.DESCRIPTOR,envoy_dot_api_dot_v2_dot_endpoint_dot_load__report__pb2.DESCRIPTOR,google_dot_protobuf_dot_duration__pb2.DESCRIPTOR,validate_dot_validate__pb2.DESCRIPTOR,])




_LOADSTATSREQUEST = _descriptor.Descriptor(
  name='LoadStatsRequest',
  full_name='envoy.service.load_stats.v2.LoadStatsRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='node', full_name='envoy.service.load_stats.v2.LoadStatsRequest.node', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='cluster_stats', full_name='envoy.service.load_stats.v2.LoadStatsRequest.cluster_stats', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=198,
  serialized_end=315,
)


_LOADSTATSRESPONSE = _descriptor.Descriptor(
  name='LoadStatsResponse',
  full_name='envoy.service.load_stats.v2.LoadStatsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='clusters', full_name='envoy.service.load_stats.v2.LoadStatsResponse.clusters', index=0,
      number=1, type=9, cpp_type=9, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\005\222\001\002\010\001'))),
    _descriptor.FieldDescriptor(
      name='load_reporting_interval', full_name='envoy.service.load_stats.v2.LoadStatsResponse.load_reporting_interval', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=317,
  serialized_end=426,
)

_LOADSTATSREQUEST.fields_by_name['node'].message_type = envoy_dot_api_dot_v2_dot_core_dot_base__pb2._NODE
_LOADSTATSREQUEST.fields_by_name['cluster_stats'].message_type = envoy_dot_api_dot_v2_dot_endpoint_dot_load__report__pb2._CLUSTERSTATS
_LOADSTATSRESPONSE.fields_by_name['load_reporting_interval'].message_type = google_dot_protobuf_dot_duration__pb2._DURATION
DESCRIPTOR.message_types_by_name['LoadStatsRequest'] = _LOADSTATSREQUEST
DESCRIPTOR.message_types_by_name['LoadStatsResponse'] = _LOADSTATSRESPONSE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

LoadStatsRequest = _reflection.GeneratedProtocolMessageType('LoadStatsRequest', (_message.Message,), dict(
  DESCRIPTOR = _LOADSTATSREQUEST,
  __module__ = 'envoy.service.load_stats.v2.lrs_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.load_stats.v2.LoadStatsRequest)
  ))
_sym_db.RegisterMessage(LoadStatsRequest)

LoadStatsResponse = _reflection.GeneratedProtocolMessageType('LoadStatsResponse', (_message.Message,), dict(
  DESCRIPTOR = _LOADSTATSRESPONSE,
  __module__ = 'envoy.service.load_stats.v2.lrs_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.load_stats.v2.LoadStatsResponse)
  ))
_sym_db.RegisterMessage(LoadStatsResponse)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('Z\002v2\210\001\001'))
_LOADSTATSRESPONSE.fields_by_name['clusters'].has_options = True
_LOADSTATSRESPONSE.fields_by_name['clusters']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\005\222\001\002\010\001'))

_LOADREPORTINGSERVICE = _descriptor.ServiceDescriptor(
  name='LoadReportingService',
  full_name='envoy.service.load_stats.v2.LoadReportingService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=429,
  serialized_end=571,
  methods=[
  _descriptor.MethodDescriptor(
    name='StreamLoadStats',
    full_name='envoy.service.load_stats.v2.LoadReportingService.StreamLoadStats',
    index=0,
    containing_service=None,
    input_type=_LOADSTATSREQUEST,
    output_type=_LOADSTATSRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_LOADREPORTINGSERVICE)

DESCRIPTOR.services_by_name['LoadReportingService'] = _LOADREPORTINGSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class LoadReportingServiceStub(object):
    """[#protodoc-title: Load reporting service]

    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.StreamLoadStats = channel.stream_stream(
          '/envoy.service.load_stats.v2.LoadReportingService/StreamLoadStats',
          request_serializer=LoadStatsRequest.SerializeToString,
          response_deserializer=LoadStatsResponse.FromString,
          )


  class LoadReportingServiceServicer(object):
    """[#protodoc-title: Load reporting service]

    """

    def StreamLoadStats(self, request_iterator, context):
      """Advanced API to allow for multi-dimensional load balancing by remote
      server. For receiving LB assignments, the steps are:
      1, The management server is configured with per cluster/zone/load metric
      capacity configuration. The capacity configuration definition is
      outside of the scope of this document.
      2. Envoy issues a standard {Stream,Fetch}Endpoints request for the clusters
      to balance.

      Independently, Envoy will initiate a StreamLoadStats bidi stream with a
      management server:
      1. Once a connection establishes, the management server publishes a
      LoadStatsResponse for all clusters it is interested in learning load
      stats about.
      2. For each cluster, Envoy load balances incoming traffic to upstream hosts
      based on per-zone weights and/or per-instance weights (if specified)
      based on intra-zone LbPolicy. This information comes from the above
      {Stream,Fetch}Endpoints.
      3. When upstream hosts reply, they optionally add header <define header
      name> with ASCII representation of EndpointLoadMetricStats.
      4. Envoy aggregates load reports over the period of time given to it in
      LoadStatsResponse.load_reporting_interval. This includes aggregation
      stats Envoy maintains by itself (total_requests, rpc_errors etc.) as
      well as load metrics from upstream hosts.
      5. When the timer of load_reporting_interval expires, Envoy sends new
      LoadStatsRequest filled with load reports for each cluster.
      6. The management server uses the load reports from all reported Envoys
      from around the world, computes global assignment and prepares traffic
      assignment destined for each zone Envoys are located in. Goto 2.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_LoadReportingServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'StreamLoadStats': grpc.stream_stream_rpc_method_handler(
            servicer.StreamLoadStats,
            request_deserializer=LoadStatsRequest.FromString,
            response_serializer=LoadStatsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'envoy.service.load_stats.v2.LoadReportingService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaLoadReportingServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#protodoc-title: Load reporting service]

    """
    def StreamLoadStats(self, request_iterator, context):
      """Advanced API to allow for multi-dimensional load balancing by remote
      server. For receiving LB assignments, the steps are:
      1, The management server is configured with per cluster/zone/load metric
      capacity configuration. The capacity configuration definition is
      outside of the scope of this document.
      2. Envoy issues a standard {Stream,Fetch}Endpoints request for the clusters
      to balance.

      Independently, Envoy will initiate a StreamLoadStats bidi stream with a
      management server:
      1. Once a connection establishes, the management server publishes a
      LoadStatsResponse for all clusters it is interested in learning load
      stats about.
      2. For each cluster, Envoy load balances incoming traffic to upstream hosts
      based on per-zone weights and/or per-instance weights (if specified)
      based on intra-zone LbPolicy. This information comes from the above
      {Stream,Fetch}Endpoints.
      3. When upstream hosts reply, they optionally add header <define header
      name> with ASCII representation of EndpointLoadMetricStats.
      4. Envoy aggregates load reports over the period of time given to it in
      LoadStatsResponse.load_reporting_interval. This includes aggregation
      stats Envoy maintains by itself (total_requests, rpc_errors etc.) as
      well as load metrics from upstream hosts.
      5. When the timer of load_reporting_interval expires, Envoy sends new
      LoadStatsRequest filled with load reports for each cluster.
      6. The management server uses the load reports from all reported Envoys
      from around the world, computes global assignment and prepares traffic
      assignment destined for each zone Envoys are located in. Goto 2.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaLoadReportingServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#protodoc-title: Load reporting service]

    """
    def StreamLoadStats(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Advanced API to allow for multi-dimensional load balancing by remote
      server. For receiving LB assignments, the steps are:
      1, The management server is configured with per cluster/zone/load metric
      capacity configuration. The capacity configuration definition is
      outside of the scope of this document.
      2. Envoy issues a standard {Stream,Fetch}Endpoints request for the clusters
      to balance.

      Independently, Envoy will initiate a StreamLoadStats bidi stream with a
      management server:
      1. Once a connection establishes, the management server publishes a
      LoadStatsResponse for all clusters it is interested in learning load
      stats about.
      2. For each cluster, Envoy load balances incoming traffic to upstream hosts
      based on per-zone weights and/or per-instance weights (if specified)
      based on intra-zone LbPolicy. This information comes from the above
      {Stream,Fetch}Endpoints.
      3. When upstream hosts reply, they optionally add header <define header
      name> with ASCII representation of EndpointLoadMetricStats.
      4. Envoy aggregates load reports over the period of time given to it in
      LoadStatsResponse.load_reporting_interval. This includes aggregation
      stats Envoy maintains by itself (total_requests, rpc_errors etc.) as
      well as load metrics from upstream hosts.
      5. When the timer of load_reporting_interval expires, Envoy sends new
      LoadStatsRequest filled with load reports for each cluster.
      6. The management server uses the load reports from all reported Envoys
      from around the world, computes global assignment and prepares traffic
      assignment destined for each zone Envoys are located in. Goto 2.
      """
      raise NotImplementedError()


  def beta_create_LoadReportingService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('envoy.service.load_stats.v2.LoadReportingService', 'StreamLoadStats'): LoadStatsRequest.FromString,
    }
    response_serializers = {
      ('envoy.service.load_stats.v2.LoadReportingService', 'StreamLoadStats'): LoadStatsResponse.SerializeToString,
    }
    method_implementations = {
      ('envoy.service.load_stats.v2.LoadReportingService', 'StreamLoadStats'): face_utilities.stream_stream_inline(servicer.StreamLoadStats),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_LoadReportingService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('envoy.service.load_stats.v2.LoadReportingService', 'StreamLoadStats'): LoadStatsRequest.SerializeToString,
    }
    response_deserializers = {
      ('envoy.service.load_stats.v2.LoadReportingService', 'StreamLoadStats'): LoadStatsResponse.FromString,
    }
    cardinalities = {
      'StreamLoadStats': cardinality.Cardinality.STREAM_STREAM,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'envoy.service.load_stats.v2.LoadReportingService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
