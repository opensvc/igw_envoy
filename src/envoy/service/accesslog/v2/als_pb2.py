# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: envoy/service/accesslog/v2/als.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from envoy.api.v2.core import base_pb2 as envoy_dot_api_dot_v2_dot_core_dot_base__pb2
from envoy.data.accesslog.v2 import accesslog_pb2 as envoy_dot_data_dot_accesslog_dot_v2_dot_accesslog__pb2
from validate import validate_pb2 as validate_dot_validate__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='envoy/service/accesslog/v2/als.proto',
  package='envoy.service.accesslog.v2',
  syntax='proto3',
  serialized_pb=_b('\n$envoy/service/accesslog/v2/als.proto\x12\x1a\x65nvoy.service.accesslog.v2\x1a\x1c\x65nvoy/api/v2/core/base.proto\x1a\'envoy/data/accesslog/v2/accesslog.proto\x1a\x17validate/validate.proto\"\x1a\n\x18StreamAccessLogsResponse\"\xe3\x04\n\x17StreamAccessLogsMessage\x12R\n\nidentifier\x18\x01 \x01(\x0b\x32>.envoy.service.accesslog.v2.StreamAccessLogsMessage.Identifier\x12]\n\thttp_logs\x18\x02 \x01(\x0b\x32H.envoy.service.accesslog.v2.StreamAccessLogsMessage.HTTPAccessLogEntriesH\x00\x12[\n\x08tcp_logs\x18\x03 \x01(\x0b\x32G.envoy.service.accesslog.v2.StreamAccessLogsMessage.TCPAccessLogEntriesH\x00\x1a\\\n\nIdentifier\x12\x31\n\x04node\x18\x01 \x01(\x0b\x32\x17.envoy.api.v2.core.NodeB\n\xba\xe9\xc0\x03\x05\x8a\x01\x02\x10\x01\x12\x1b\n\x08log_name\x18\x02 \x01(\tB\t\xba\xe9\xc0\x03\x04r\x02 \x01\x1a\x62\n\x14HTTPAccessLogEntries\x12J\n\tlog_entry\x18\x01 \x03(\x0b\x32+.envoy.data.accesslog.v2.HTTPAccessLogEntryB\n\xba\xe9\xc0\x03\x05\x92\x01\x02\x08\x01\x1a`\n\x13TCPAccessLogEntries\x12I\n\tlog_entry\x18\x01 \x03(\x0b\x32*.envoy.data.accesslog.v2.TCPAccessLogEntryB\n\xba\xe9\xc0\x03\x05\x92\x01\x02\x08\x01\x42\x14\n\x0blog_entries\x12\x05\xb8\xe9\xc0\x03\x01\x32\x96\x01\n\x10\x41\x63\x63\x65ssLogService\x12\x81\x01\n\x10StreamAccessLogs\x12\x33.envoy.service.accesslog.v2.StreamAccessLogsMessage\x1a\x34.envoy.service.accesslog.v2.StreamAccessLogsResponse\"\x00(\x01\x42=\n(io.envoyproxy.envoy.service.accesslog.v2B\x08\x41lsProtoP\x01Z\x02v2\x88\x01\x01\x62\x06proto3')
  ,
  dependencies=[envoy_dot_api_dot_v2_dot_core_dot_base__pb2.DESCRIPTOR,envoy_dot_data_dot_accesslog_dot_v2_dot_accesslog__pb2.DESCRIPTOR,validate_dot_validate__pb2.DESCRIPTOR,])




_STREAMACCESSLOGSRESPONSE = _descriptor.Descriptor(
  name='StreamAccessLogsResponse',
  full_name='envoy.service.accesslog.v2.StreamAccessLogsResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=164,
  serialized_end=190,
)


_STREAMACCESSLOGSMESSAGE_IDENTIFIER = _descriptor.Descriptor(
  name='Identifier',
  full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.Identifier',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='node', full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.Identifier.node', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\005\212\001\002\020\001'))),
    _descriptor.FieldDescriptor(
      name='log_name', full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.Identifier.log_name', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\004r\002 \001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=492,
  serialized_end=584,
)

_STREAMACCESSLOGSMESSAGE_HTTPACCESSLOGENTRIES = _descriptor.Descriptor(
  name='HTTPAccessLogEntries',
  full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.HTTPAccessLogEntries',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='log_entry', full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.HTTPAccessLogEntries.log_entry', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\005\222\001\002\010\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=586,
  serialized_end=684,
)

_STREAMACCESSLOGSMESSAGE_TCPACCESSLOGENTRIES = _descriptor.Descriptor(
  name='TCPAccessLogEntries',
  full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.TCPAccessLogEntries',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='log_entry', full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.TCPAccessLogEntries.log_entry', index=0,
      number=1, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\005\222\001\002\010\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=686,
  serialized_end=782,
)

_STREAMACCESSLOGSMESSAGE = _descriptor.Descriptor(
  name='StreamAccessLogsMessage',
  full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='identifier', full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.identifier', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='http_logs', full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.http_logs', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='tcp_logs', full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.tcp_logs', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[_STREAMACCESSLOGSMESSAGE_IDENTIFIER, _STREAMACCESSLOGSMESSAGE_HTTPACCESSLOGENTRIES, _STREAMACCESSLOGSMESSAGE_TCPACCESSLOGENTRIES, ],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='log_entries', full_name='envoy.service.accesslog.v2.StreamAccessLogsMessage.log_entries',
      index=0, containing_type=None, fields=[], options=_descriptor._ParseOptions(descriptor_pb2.OneofOptions(), _b('\270\351\300\003\001'))),
  ],
  serialized_start=193,
  serialized_end=804,
)

_STREAMACCESSLOGSMESSAGE_IDENTIFIER.fields_by_name['node'].message_type = envoy_dot_api_dot_v2_dot_core_dot_base__pb2._NODE
_STREAMACCESSLOGSMESSAGE_IDENTIFIER.containing_type = _STREAMACCESSLOGSMESSAGE
_STREAMACCESSLOGSMESSAGE_HTTPACCESSLOGENTRIES.fields_by_name['log_entry'].message_type = envoy_dot_data_dot_accesslog_dot_v2_dot_accesslog__pb2._HTTPACCESSLOGENTRY
_STREAMACCESSLOGSMESSAGE_HTTPACCESSLOGENTRIES.containing_type = _STREAMACCESSLOGSMESSAGE
_STREAMACCESSLOGSMESSAGE_TCPACCESSLOGENTRIES.fields_by_name['log_entry'].message_type = envoy_dot_data_dot_accesslog_dot_v2_dot_accesslog__pb2._TCPACCESSLOGENTRY
_STREAMACCESSLOGSMESSAGE_TCPACCESSLOGENTRIES.containing_type = _STREAMACCESSLOGSMESSAGE
_STREAMACCESSLOGSMESSAGE.fields_by_name['identifier'].message_type = _STREAMACCESSLOGSMESSAGE_IDENTIFIER
_STREAMACCESSLOGSMESSAGE.fields_by_name['http_logs'].message_type = _STREAMACCESSLOGSMESSAGE_HTTPACCESSLOGENTRIES
_STREAMACCESSLOGSMESSAGE.fields_by_name['tcp_logs'].message_type = _STREAMACCESSLOGSMESSAGE_TCPACCESSLOGENTRIES
_STREAMACCESSLOGSMESSAGE.oneofs_by_name['log_entries'].fields.append(
  _STREAMACCESSLOGSMESSAGE.fields_by_name['http_logs'])
_STREAMACCESSLOGSMESSAGE.fields_by_name['http_logs'].containing_oneof = _STREAMACCESSLOGSMESSAGE.oneofs_by_name['log_entries']
_STREAMACCESSLOGSMESSAGE.oneofs_by_name['log_entries'].fields.append(
  _STREAMACCESSLOGSMESSAGE.fields_by_name['tcp_logs'])
_STREAMACCESSLOGSMESSAGE.fields_by_name['tcp_logs'].containing_oneof = _STREAMACCESSLOGSMESSAGE.oneofs_by_name['log_entries']
DESCRIPTOR.message_types_by_name['StreamAccessLogsResponse'] = _STREAMACCESSLOGSRESPONSE
DESCRIPTOR.message_types_by_name['StreamAccessLogsMessage'] = _STREAMACCESSLOGSMESSAGE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

StreamAccessLogsResponse = _reflection.GeneratedProtocolMessageType('StreamAccessLogsResponse', (_message.Message,), dict(
  DESCRIPTOR = _STREAMACCESSLOGSRESPONSE,
  __module__ = 'envoy.service.accesslog.v2.als_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.accesslog.v2.StreamAccessLogsResponse)
  ))
_sym_db.RegisterMessage(StreamAccessLogsResponse)

StreamAccessLogsMessage = _reflection.GeneratedProtocolMessageType('StreamAccessLogsMessage', (_message.Message,), dict(

  Identifier = _reflection.GeneratedProtocolMessageType('Identifier', (_message.Message,), dict(
    DESCRIPTOR = _STREAMACCESSLOGSMESSAGE_IDENTIFIER,
    __module__ = 'envoy.service.accesslog.v2.als_pb2'
    # @@protoc_insertion_point(class_scope:envoy.service.accesslog.v2.StreamAccessLogsMessage.Identifier)
    ))
  ,

  HTTPAccessLogEntries = _reflection.GeneratedProtocolMessageType('HTTPAccessLogEntries', (_message.Message,), dict(
    DESCRIPTOR = _STREAMACCESSLOGSMESSAGE_HTTPACCESSLOGENTRIES,
    __module__ = 'envoy.service.accesslog.v2.als_pb2'
    # @@protoc_insertion_point(class_scope:envoy.service.accesslog.v2.StreamAccessLogsMessage.HTTPAccessLogEntries)
    ))
  ,

  TCPAccessLogEntries = _reflection.GeneratedProtocolMessageType('TCPAccessLogEntries', (_message.Message,), dict(
    DESCRIPTOR = _STREAMACCESSLOGSMESSAGE_TCPACCESSLOGENTRIES,
    __module__ = 'envoy.service.accesslog.v2.als_pb2'
    # @@protoc_insertion_point(class_scope:envoy.service.accesslog.v2.StreamAccessLogsMessage.TCPAccessLogEntries)
    ))
  ,
  DESCRIPTOR = _STREAMACCESSLOGSMESSAGE,
  __module__ = 'envoy.service.accesslog.v2.als_pb2'
  # @@protoc_insertion_point(class_scope:envoy.service.accesslog.v2.StreamAccessLogsMessage)
  ))
_sym_db.RegisterMessage(StreamAccessLogsMessage)
_sym_db.RegisterMessage(StreamAccessLogsMessage.Identifier)
_sym_db.RegisterMessage(StreamAccessLogsMessage.HTTPAccessLogEntries)
_sym_db.RegisterMessage(StreamAccessLogsMessage.TCPAccessLogEntries)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n(io.envoyproxy.envoy.service.accesslog.v2B\010AlsProtoP\001Z\002v2\210\001\001'))
_STREAMACCESSLOGSMESSAGE_IDENTIFIER.fields_by_name['node'].has_options = True
_STREAMACCESSLOGSMESSAGE_IDENTIFIER.fields_by_name['node']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\005\212\001\002\020\001'))
_STREAMACCESSLOGSMESSAGE_IDENTIFIER.fields_by_name['log_name'].has_options = True
_STREAMACCESSLOGSMESSAGE_IDENTIFIER.fields_by_name['log_name']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\004r\002 \001'))
_STREAMACCESSLOGSMESSAGE_HTTPACCESSLOGENTRIES.fields_by_name['log_entry'].has_options = True
_STREAMACCESSLOGSMESSAGE_HTTPACCESSLOGENTRIES.fields_by_name['log_entry']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\005\222\001\002\010\001'))
_STREAMACCESSLOGSMESSAGE_TCPACCESSLOGENTRIES.fields_by_name['log_entry'].has_options = True
_STREAMACCESSLOGSMESSAGE_TCPACCESSLOGENTRIES.fields_by_name['log_entry']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\272\351\300\003\005\222\001\002\010\001'))
_STREAMACCESSLOGSMESSAGE.oneofs_by_name['log_entries'].has_options = True
_STREAMACCESSLOGSMESSAGE.oneofs_by_name['log_entries']._options = _descriptor._ParseOptions(descriptor_pb2.OneofOptions(), _b('\270\351\300\003\001'))

_ACCESSLOGSERVICE = _descriptor.ServiceDescriptor(
  name='AccessLogService',
  full_name='envoy.service.accesslog.v2.AccessLogService',
  file=DESCRIPTOR,
  index=0,
  options=None,
  serialized_start=807,
  serialized_end=957,
  methods=[
  _descriptor.MethodDescriptor(
    name='StreamAccessLogs',
    full_name='envoy.service.accesslog.v2.AccessLogService.StreamAccessLogs',
    index=0,
    containing_service=None,
    input_type=_STREAMACCESSLOGSMESSAGE,
    output_type=_STREAMACCESSLOGSRESPONSE,
    options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_ACCESSLOGSERVICE)

DESCRIPTOR.services_by_name['AccessLogService'] = _ACCESSLOGSERVICE

try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities


  class AccessLogServiceStub(object):
    """[#protodoc-title: gRPC Access Log Service (ALS)]

    Service for streaming access logs from Envoy to an access log server.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.StreamAccessLogs = channel.stream_unary(
          '/envoy.service.accesslog.v2.AccessLogService/StreamAccessLogs',
          request_serializer=StreamAccessLogsMessage.SerializeToString,
          response_deserializer=StreamAccessLogsResponse.FromString,
          )


  class AccessLogServiceServicer(object):
    """[#protodoc-title: gRPC Access Log Service (ALS)]

    Service for streaming access logs from Envoy to an access log server.
    """

    def StreamAccessLogs(self, request_iterator, context):
      """Envoy will connect and send StreamAccessLogsMessage messages forever. It does not expect any
      response to be sent as nothing would be done in the case of failure. The server should
      disconnect if it expects Envoy to reconnect. In the future we may decide to add a different
      API for "critical" access logs in which Envoy will buffer access logs for some period of time
      until it gets an ACK so it could then retry. This API is designed for high throughput with the
      expectation that it might be lossy.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_AccessLogServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'StreamAccessLogs': grpc.stream_unary_rpc_method_handler(
            servicer.StreamAccessLogs,
            request_deserializer=StreamAccessLogsMessage.FromString,
            response_serializer=StreamAccessLogsResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'envoy.service.accesslog.v2.AccessLogService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaAccessLogServiceServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#protodoc-title: gRPC Access Log Service (ALS)]

    Service for streaming access logs from Envoy to an access log server.
    """
    def StreamAccessLogs(self, request_iterator, context):
      """Envoy will connect and send StreamAccessLogsMessage messages forever. It does not expect any
      response to be sent as nothing would be done in the case of failure. The server should
      disconnect if it expects Envoy to reconnect. In the future we may decide to add a different
      API for "critical" access logs in which Envoy will buffer access logs for some period of time
      until it gets an ACK so it could then retry. This API is designed for high throughput with the
      expectation that it might be lossy.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaAccessLogServiceStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """[#protodoc-title: gRPC Access Log Service (ALS)]

    Service for streaming access logs from Envoy to an access log server.
    """
    def StreamAccessLogs(self, request_iterator, timeout, metadata=None, with_call=False, protocol_options=None):
      """Envoy will connect and send StreamAccessLogsMessage messages forever. It does not expect any
      response to be sent as nothing would be done in the case of failure. The server should
      disconnect if it expects Envoy to reconnect. In the future we may decide to add a different
      API for "critical" access logs in which Envoy will buffer access logs for some period of time
      until it gets an ACK so it could then retry. This API is designed for high throughput with the
      expectation that it might be lossy.
      """
      raise NotImplementedError()
    StreamAccessLogs.future = None


  def beta_create_AccessLogService_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('envoy.service.accesslog.v2.AccessLogService', 'StreamAccessLogs'): StreamAccessLogsMessage.FromString,
    }
    response_serializers = {
      ('envoy.service.accesslog.v2.AccessLogService', 'StreamAccessLogs'): StreamAccessLogsResponse.SerializeToString,
    }
    method_implementations = {
      ('envoy.service.accesslog.v2.AccessLogService', 'StreamAccessLogs'): face_utilities.stream_unary_inline(servicer.StreamAccessLogs),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_AccessLogService_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('envoy.service.accesslog.v2.AccessLogService', 'StreamAccessLogs'): StreamAccessLogsMessage.SerializeToString,
    }
    response_deserializers = {
      ('envoy.service.accesslog.v2.AccessLogService', 'StreamAccessLogs'): StreamAccessLogsResponse.FromString,
    }
    cardinalities = {
      'StreamAccessLogs': cardinality.Cardinality.STREAM_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'envoy.service.accesslog.v2.AccessLogService', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
